data = dat)
survey_cc <- subset(survey_cc, complete.cases(dat))
survey_imp <- svydesign(id = ~PSU_ID,
strata = ~STRAT,
weights = ~WEIGHT_FINAL_NORM_OVERALL,
nest = TRUE,
data = dat_imp)
cur_mean <- svymean(~GISE, survey_cc)[1]
cur_sd <- sqrt(svyvar(~GISE, survey_cc)[1])
dat_miss$GISE_scaled <- (dat_miss$GISE - cur_mean)/cur_sd
cur_mean <- svymean(~GIPSE, survey_cc)[1]
cur_sd <- sqrt(svyvar(~GIPSE, survey_cc)[1])
dat_miss$GIPSE_scaled <- (dat_miss$GIPSE - cur_mean)/cur_sd
for (suffix in c("", ".1", ".2", ".3", ".4")){
cur_mean <- svymean(as.formula(paste0("~GISE", suffix)), survey_imp)[1]
cur_sd <- sqrt(svyvar(as.formula(paste0("~GISE", suffix)), survey_imp)[1])
dat_imp[[paste0("GISE_scaled", suffix)]] <- (dat_imp[[paste0("GISE", suffix)]] - cur_mean)/cur_sd
cur_mean <- svymean(as.formula(paste0("~GIPSE", suffix)), survey_imp)[1]
cur_sd <- sqrt(svyvar(as.formula(paste0("~GIPSE", suffix)), survey_imp)[1])
dat_imp[[paste0("GIPSE_scaled", suffix)]] <- (dat_imp[[paste0("GIPSE", suffix)]] - cur_mean)/cur_sd
}
# recompute the survey objects:
dat <- merge(dat_miss,
dat_no_indices[,c("ID", "STRAT" ,"PSU_ID", "WEIGHT_FINAL_NORM_OVERALL")],
by = c("ID", "STRAT" ,"PSU_ID", "WEIGHT_FINAL_NORM_OVERALL"), all = TRUE)
survey_cc <- svydesign(id = ~PSU_ID,
strata = ~STRAT,
weights = ~WEIGHT_FINAL_NORM_OVERALL,
nest = TRUE,
data = dat)
survey_cc <- subset(survey_cc, complete.cases(dat))
survey_imp <- svydesign(id = ~PSU_ID,
strata = ~STRAT,
weights = ~WEIGHT_FINAL_NORM_OVERALL,
nest = TRUE,
data = dat_imp)
model1 <- c("Age", "Center", "Background", "Sex")
model2 <- c("Age", "Center", "Background", "Sex", "GISE_scaled")
model3 <- c("Age", "Center", "Background", "Sex", "GIPSE_scaled")
# models 4 and 5 include components of the primary and secondary indices:
model4 <- c(model1, "Marital_status",
"Income_level",
"Employment_status",
"Occupation",
"Education",
"Current_Health_insurance",
"Language_pref",
"Language_acculturation",
"Social_acculturation",
"Ethnic_identity_score",
"Years_in_US")
model5 <- c(model4, c("CESD9", "STAI10"))
# for stratified model
model2_sex_strat <- setdiff(model2,  "Sex")
model3_sex_strat <-  setdiff(model3,  "Sex")
# function to extract the estimated effect of an exposure on a binary outcome
extract_one_exp <- function(mod, exposure, round_digit = 2){
est <- summary(mod)$coef
confint <- confint(mod)
ind <- grep(exposure, rownames(est))
df_out <- data.frame(exposure = exposure,
est = round(exp(est[ind, "Estimate"]),round_digit),
CI = paste0("(", round(exp(confint[ind, 1]), round_digit),
",",round(exp(confint[ind, 2]), round_digit) , ")"),
pval = formatC(est[ind, "Pr(>|t|)"], digits = round_digit, format = "E"),
paper_pval= format_pvalue(est[ind, "Pr(>|t|)"]))
return(df_out)
}
table5 <- data.frame(row.names = c(paste0("all_model_",1:5 ),
paste0("male_model_", 2:3),
paste0("female_model_", 2:3)),
male_eff = rep(NA, 9),
male_CI = NA,
male_pval = NA,
male_paper_pval = NA,
index_eff = NA,
index_CI = NA,
index_pval = NA,
index_paper_pval = NA)
# fit models (sex combined)
model1_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model1, collapse = "+"))), design = survey_cc, family = quasibinomial())
model2_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model2, collapse = "+"))), design = survey_cc, family = quasibinomial())
model3_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model3, collapse = "+"))), design = survey_cc, family = quasibinomial())
model4_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model4, collapse = "+"))), design = survey_cc, family = quasibinomial())
model5_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model5, collapse = "+"))), design = survey_cc, family = quasibinomial())
for (i in 1:5){
table5[paste0("all_model_", i),
c("male_eff", "male_CI", "male_pval")] <-
extract_one_exp(get(paste0("model", i, "_fit")) ,
exposure = "Sex")[c("est", "CI", "pval", "paper_pval")]
}
table5["all_model_2",
c("index_eff", "index_CI",  "index_pval")]  <-
extract_one_exp(get(paste0("model2_fit")) ,
exposure = "GISE_scaled")[c("est", "CI", "pval","paper_pval")]
table5["all_model_3",
c("index_eff", "index_CI", "index_pval")]  <-
extract_one_exp(get(paste0("model3_fit")) ,
exposure = "GIPSE_scaled")[c("est", "CI", "pval","paper_pval")]
survey_cc_male <- subset(survey_cc, Sex == "Male")
survey_cc_female <- subset(survey_cc, Sex == "Female")
model2_male_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model2_sex_strat, collapse = "+"))), design = survey_cc_male, family = quasibinomial())
model3_male_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model3_sex_strat, collapse = "+"))), design = survey_cc_male, family = quasibinomial())
model2_female_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model2_sex_strat, collapse = "+"))), design = survey_cc_female, family = quasibinomial())
model3_female_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model3_sex_strat, collapse = "+"))), design = survey_cc_female, family = quasibinomial())
for (i in 2:3){
for (sex in c("male", "female")){
type <- ifelse(i == 2, "GISE", "GIPSE")
table5[paste0(sex, "_model_", i),
c("index_eff", "index_CI", "index_pval", "index_paper_pval")]  <-
extract_one_exp(get(paste0("model", i, "_", sex, "_fit")) ,
exposure = paste0(type, "_scaled"))[c("est", "CI", "pval","paper_pval")]
}
}
table5
write.csv(table5, file = file.path(folder_path, "Results/table5.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(survey)
library(plyr)
library(dplyr)
library(factoextra)
library(labelled)
library(tableone)
library(memisc)
library(sjlabelled)
library(mi)
library(boot)
library(glmnet)
library(UpSetR)
library(naniar)
library(RColorBrewer)
library(svyVGAM)
library(jtools)
library(reshape2)
# source p-value formatting function
source("format_pvalue.R")
folder_path <- "/Users/tamarsofer/Library/CloudStorage/OneDrive-BethIsraelLaheyHealth/Ongoing_papers/2022_gendered_indices"
data_with_sleep <- read_csv(file.path(folder_path, "Data/sol_sofer_sorajja_joon_covariates_20220810.csv"))
# load the prepared dataset
dat <- readRDS(file.path(folder_path, "Data/Data_with_miss.Rds"))
# survey object
survey_base <- svydesign(id = ~PSU_ID,
strata = ~STRAT,
weights = ~WEIGHT_FINAL_NORM_OVERALL,
nest = TRUE,
data = dat)
sleepDesign <- subset(survey_base, complete.cases(dat))
# baseline covariates to adjust for
adj_vars <- c("Age", "Center", "Background")
# multi-level variables to be analyzed in multinomial regression
multi_vars <- c("Marital_status",
"Occupation",
"Income_level",
"Employment_status",
"Education",
"Years_in_US")
# not multi-level ones:
single_vars  <- c("Language_pref",
"Current_Health_insurance",
"Language_acculturation",
"Social_acculturation",
"Ethnic_identity_score",
"STAI10",
"CESD")
cont_vars  <- c( "Language_acculturation",
"Social_acculturation",
"Ethnic_identity_score",
"STAI10",
"CESD9")
binary_vars  <- c("Language_pref",
"Current_Health_insurance")
extract_mult_out <- function(mod, exposure, out_name, level_names, round_digit = 2){
est <- summary(mod)$coeftable
confint <- confint(mod)
inds <- grep(exposure, rownames(est))
df_out <- data.frame(outcome = paste0(out_name,": ", level_names),
est = round(exp(est[inds, "Coef"]),round_digit),
CI = paste0("(", round(exp(confint[inds, 1]), round_digit), ",",
round(exp(confint[inds, 2]), round_digit), ")"),
pval = formatC(est[inds, "p"], digits = round_digit, format = "E"),
paper_pval= format_pvalue(est[inds, "p"]))
return(df_out)
}
extract_one_out <- function(mod, exposure, out_name, exponentiate = TRUE, round_digit = 2){
est <- summary(mod)$coef
confint <- confint(mod)
ind <- grep(exposure, rownames(est))
if (exponentiate){
df_out <- data.frame(outcome = out_name,
est = round(exp(est[ind, "Estimate"]),round_digit),
CI = paste0("(", round(exp(confint[ind, 1]), round_digit), ",",
round(exp(confint[ind, 2]), round_digit), ")"),
pval = formatC(est[ind, "Pr(>|t|)"], digits = round_digit, format = "E"),
paper_pval= format_pvalue(est[ind, "Pr(>|t|)"]))
} else{
df_out <- data.frame(outcome = out_name,
est = round(est[ind, "Estimate"],round_digit),
CI = paste0("(", round(confint[ind, 1], round_digit), ",",
round(confint[ind, 2], round_digit), ")"),
pval = formatC(est[ind, "Pr(>|t|)"], digits = round_digit, format = "E"),
paper_pval = format_pvalue(est[ind, "Pr(>|t|)"]))
}
return(df_out)
}
all_out <- vector(mode = "list", length = length(multi_vars) + length(single_vars))
ind <- 1
var <- multi_vars[1]
vglm_mod <- svy_vglm(formula = as.formula(paste0(var, "~Sex+Age+Center+Background")), design = sleepDesign, family = multinomial(refLevel = 1), drop.unused.levels = TRUE)
summary( vglm_mod )
extract_mult_out(vglm_mod,
exposure = "Sex",
out_name  = var,
level_names  = levels(dat[[var]])[-1])
all_out <- vector(mode = "list", length = length(multi_vars) + length(single_vars))
ind <- 1
for (var in multi_vars){
vglm_mod <- svy_vglm(formula = as.formula(paste0(var, "~Sex+Age+Center+Background")), design = sleepDesign, family = multinomial(refLevel = 1), drop.unused.levels = TRUE)
all_out[[ind]] <- extract_mult_out(vglm_mod,
exposure = "Sex",
out_name  = var,
level_names  = levels(dat[[var]])[-1])
ind <- ind + 1
}
for (var in cont_vars){
mod <- svyglm(formula = as.formula(paste0(var, "~Sex+Age+Center+Background")), design = sleepDesign, family = quasipoisson())
all_out[[ind]] <- extract_one_out(mod,
exposure = "Sex",
out_name  = var,
exponentiate = FALSE)
ind <- ind + 1
}
for (var in binary_vars){
mod <- svyglm(formula = as.formula(paste0(var, "~Sex+Age+Center+Background")), design = sleepDesign, family = quasibinomial())
all_out[[ind]] <- extract_one_out(mod,
exposure = "Sex",
out_name  = var,
exponentiate= TRUE)
ind <- ind + 1
}
sex_tab <- do.call(rbind, all_out)
rownames(sex_tab) <- paste0("r", 1:nrow(sex_tab))
print(sex_tab)
write.csv(sex_tab, file = file.path(folder_path, "Results/All_vars_assoc_sex.csv"))
sex_Tab
sex_tab
extract_mult_exp <- function(mod, exposure, level_names, round_digit = 2){
est <- summary(mod)$coef
confint <- confint(mod)
inds <- grep(exposure, rownames(est))
df_out <- data.frame(exposure = paste0(exposure,": ", level_names),
est = round(exp(est[inds, "Estimate"]),round_digit),
CI = paste0("(", round(exp(confint[inds, 1]), round_digit), ",",
round(exp(confint[inds, 2]), round_digit), ")"),
pval = formatC(est[inds, "Pr(>|t|)"], digits = round_digit, format = "E"),
paper_pval = format_pvalue(est[ind, "Pr(>|t|)"]))
return(df_out)
}
extract_one_exp <- function(mod, exposure, round_digit = 2){
est <- summary(mod)$coef
confint <- confint(mod)
ind <- grep(exposure, rownames(est))
df_out <- data.frame(exposure = exposure,
est = round(exp(est[ind, "Estimate"]),round_digit),
CI = paste0("(", round(exp(confint[ind, 1]), round_digit), ",",
round(exp(confint[ind, 2]), round_digit), ")"),
pval = formatC(est[ind, "Pr(>|t|)"], digits = round_digit, format = "E"),
paper_pval = format_pvalue(est[ind, "Pr(>|t|)"]))
return(df_out)
}
all_out <- vector(mode = "list", length = length(multi_vars) + length(single_vars))
ind <- 1
var <- multi_vars[1]
mod <- svyglm(formula = as.formula(paste0("Insomnia~Age+Center+Background+", var)),
design = sleepDesign, family = quasibinomial())
extract_mult_exp(mod,
exposure = var,
level_names  = levels(dat[[var]])[-1])
extract_mult_out(vglm_mod,
exposure = "Sex",
out_name  = var,
level_names  = levels(dat[[var]])[-1])
for (var in multi_vars){
mod <- svyglm(formula = as.formula(paste0("Insomnia~Age+Center+Background+", var)),
design = sleepDesign, family = quasibinomial())
all_out[[ind]] <- extract_mult_exp(mod,
exposure = var,
level_names  = levels(dat[[var]])[-1])
ind <- ind + 1
}
all_out
all_out <- vector(mode = "list", length = length(multi_vars) + length(single_vars))
ind <- 1
var <- multi_vars[1]
mod <- svyglm(formula = as.formula(paste0("Insomnia~Age+Center+Background+", var)),
design = sleepDesign, family = quasibinomial())
extract_mult_exp(mod,
exposure = var,
level_names  = levels(dat[[var]])[-1])
format_pvalue
exposure <-  var
level_names  <-  levels(dat[[var]])[-1]
est <- summary(mod)$coef
est
confint <- confint(mod)
inds <- grep(exposure, rownames(est))
extract_mult_exp <- function(mod, exposure, level_names, round_digit = 2){
est <- summary(mod)$coef
confint <- confint(mod)
inds <- grep(exposure, rownames(est))
df_out <- data.frame(exposure = paste0(exposure,": ", level_names),
est = round(exp(est[inds, "Estimate"]),round_digit),
CI = paste0("(", round(exp(confint[inds, 1]), round_digit), ",",
round(exp(confint[inds, 2]), round_digit), ")"),
pval = formatC(est[inds, "Pr(>|t|)"], digits = round_digit, format = "E"),
paper_pval = format_pvalue(est[inds, "Pr(>|t|)"]))
return(df_out)
}
all_out <- vector(mode = "list", length = length(multi_vars) + length(single_vars))
ind <- 1
for (var in multi_vars){
mod <- svyglm(formula = as.formula(paste0("Insomnia~Age+Center+Background+", var)),
design = sleepDesign, family = quasibinomial())
all_out[[ind]] <- extract_mult_exp(mod,
exposure = var,
level_names  = levels(dat[[var]])[-1])
ind <- ind + 1
}
all_out
for (var in c(cont_vars, binary_vars)){
mod <- svyglm(formula = as.formula(paste0("Insomnia~Age+Center+Background+", var)),
design = sleepDesign, family = quasibinomial())
all_out[[ind]] <- extract_one_exp(mod,
exposure = var)
ind <- ind + 1
}
insomnia_no_sex_tab <- do.call(rbind, all_out)
rownames(insomnia_no_sex_tab) <- paste0("r", 1:nrow(sex_tab))
print(insomnia_no_sex_tab)
insomnia_no_sex_tab
insomnia_no_sex_tab
library(tidyverse)
library(survey)
library(plyr)
library(dplyr)
library(factoextra)
library(labelled)
library(memisc)
library(sjlabelled)
library(boot)
library(glmnet)
library(UpSetR)
library(naniar)
library(RColorBrewer)
library(jtools)
library(reshape2)
# source p-value formatting function
source("format_pvalue.R")
folder_path <- "/Users/tamarsofer/Library/CloudStorage/OneDrive-BethIsraelLaheyHealth/Ongoing_papers/2022_gendered_indices"
dat_no_indices <- readRDS(file.path(folder_path, "Data/Data_with_miss.Rds"))
# the data with missing values:
# load the prepared dataset with indices
dat_miss <- readRDS(file.path(folder_path, "Data/Data_complete_case_with_indices.Rds"))
# load the imputed dataset with indices
dat_imp <- readRDS(file.path(folder_path, "Data/Data_imputed_with_indices.Rds"))
print(paste("The complete case dataset has", nrow(dat_miss), "individuals"))
print(paste("The imputed dataset has", nrow(dat_imp), "individuals"))
# because of the survey sampling design, we need to "merge"
# the complete case dataset with design variables of the complete dataset
dat <- merge(dat_miss,
dat_no_indices[,c("ID", "STRAT" ,"PSU_ID", "WEIGHT_FINAL_NORM_OVERALL")],
by = c("ID", "STRAT" ,"PSU_ID", "WEIGHT_FINAL_NORM_OVERALL"), all = TRUE)
dat_imp <- merge(dat_imp,
dat_no_indices[,c("ID", "WEIGHT_FINAL_NORM_OVERALL", "PSU_ID")],
by = c("ID"))
nrow(dat) == nrow(dat_imp)
survey_cc <- svydesign(id = ~PSU_ID,
strata = ~STRAT,
weights = ~WEIGHT_FINAL_NORM_OVERALL,
nest = TRUE,
data = dat)
survey_cc <- subset(survey_cc, complete.cases(dat))
survey_imp <- svydesign(id = ~PSU_ID,
strata = ~STRAT,
weights = ~WEIGHT_FINAL_NORM_OVERALL,
nest = TRUE,
data = dat_imp)
cur_mean <- svymean(~GISE, survey_cc)[1]
cur_sd <- sqrt(svyvar(~GISE, survey_cc)[1])
dat_miss$GISE_scaled <- (dat_miss$GISE - cur_mean)/cur_sd
cur_mean <- svymean(~GIPSE, survey_cc)[1]
cur_sd <- sqrt(svyvar(~GIPSE, survey_cc)[1])
dat_miss$GIPSE_scaled <- (dat_miss$GIPSE - cur_mean)/cur_sd
for (suffix in c("", ".1", ".2", ".3", ".4")){
cur_mean <- svymean(as.formula(paste0("~GISE", suffix)), survey_imp)[1]
cur_sd <- sqrt(svyvar(as.formula(paste0("~GISE", suffix)), survey_imp)[1])
dat_imp[[paste0("GISE_scaled", suffix)]] <- (dat_imp[[paste0("GISE", suffix)]] - cur_mean)/cur_sd
cur_mean <- svymean(as.formula(paste0("~GIPSE", suffix)), survey_imp)[1]
cur_sd <- sqrt(svyvar(as.formula(paste0("~GIPSE", suffix)), survey_imp)[1])
dat_imp[[paste0("GIPSE_scaled", suffix)]] <- (dat_imp[[paste0("GIPSE", suffix)]] - cur_mean)/cur_sd
}
# recompute the survey objects:
dat <- merge(dat_miss,
dat_no_indices[,c("ID", "STRAT" ,"PSU_ID", "WEIGHT_FINAL_NORM_OVERALL")],
by = c("ID", "STRAT" ,"PSU_ID", "WEIGHT_FINAL_NORM_OVERALL"), all = TRUE)
survey_cc <- svydesign(id = ~PSU_ID,
strata = ~STRAT,
weights = ~WEIGHT_FINAL_NORM_OVERALL,
nest = TRUE,
data = dat)
survey_cc <- subset(survey_cc, complete.cases(dat))
survey_imp <- svydesign(id = ~PSU_ID,
strata = ~STRAT,
weights = ~WEIGHT_FINAL_NORM_OVERALL,
nest = TRUE,
data = dat_imp)
model1 <- c("Age", "Center", "Background", "Sex")
model2 <- c("Age", "Center", "Background", "Sex", "GISE_scaled")
model3 <- c("Age", "Center", "Background", "Sex", "GIPSE_scaled")
# models 4 and 5 include components of the primary and secondary indices:
model4 <- c(model1, "Marital_status",
"Income_level",
"Employment_status",
"Occupation",
"Education",
"Current_Health_insurance",
"Language_pref",
"Language_acculturation",
"Social_acculturation",
"Ethnic_identity_score",
"Years_in_US")
model5 <- c(model4, c("CESD9", "STAI10"))
# for stratified model
model2_sex_strat <- setdiff(model2,  "Sex")
model3_sex_strat <-  setdiff(model3,  "Sex")
# function to extract the estimated effect of an exposure on a binary outcome
extract_one_exp <- function(mod, exposure, round_digit = 2){
est <- summary(mod)$coef
confint <- confint(mod)
ind <- grep(exposure, rownames(est))
df_out <- data.frame(exposure = exposure,
est = round(exp(est[ind, "Estimate"]),round_digit),
CI = paste0("(", round(exp(confint[ind, 1]), round_digit),
",",round(exp(confint[ind, 2]), round_digit) , ")"),
pval = formatC(est[ind, "Pr(>|t|)"], digits = round_digit, format = "E"),
paper_pval= format_pvalue(est[ind, "Pr(>|t|)"]))
return(df_out)
}
table5 <- data.frame(row.names = c(paste0("all_model_",1:5 ),
paste0("male_model_", 2:3),
paste0("female_model_", 2:3)),
male_eff = rep(NA, 9),
male_CI = NA,
male_pval = NA,
male_paper_pval = NA,
index_eff = NA,
index_CI = NA,
index_pval = NA,
index_paper_pval = NA)
# fit models (sex combined)
model1_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model1, collapse = "+"))), design = survey_cc, family = quasibinomial())
model2_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model2, collapse = "+"))), design = survey_cc, family = quasibinomial())
model3_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model3, collapse = "+"))), design = survey_cc, family = quasibinomial())
model4_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model4, collapse = "+"))), design = survey_cc, family = quasibinomial())
model5_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model5, collapse = "+"))), design = survey_cc, family = quasibinomial())
for (i in 1:5){
table5[paste0("all_model_", i),
c("male_eff", "male_CI", "male_pval", "male_paper_pval")] <-
extract_one_exp(get(paste0("model", i, "_fit")) ,
exposure = "Sex")[c("est", "CI", "pval", "paper_pval")]
}
table5["all_model_2",
c("index_eff", "index_CI",  "index_pval", "index_paper_pval")]  <-
extract_one_exp(get(paste0("model2_fit")) ,
exposure = "GISE_scaled")[c("est", "CI", "pval","paper_pval")]
table5["all_model_3",
c("index_eff", "index_CI", "index_pval", "index_paper_pval")]  <-
extract_one_exp(get(paste0("model3_fit")) ,
exposure = "GIPSE_scaled")[c("est", "CI", "pval","paper_pval")]
survey_cc_male <- subset(survey_cc, Sex == "Male")
survey_cc_female <- subset(survey_cc, Sex == "Female")
model2_male_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model2_sex_strat, collapse = "+"))), design = survey_cc_male, family = quasibinomial())
model3_male_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model3_sex_strat, collapse = "+"))), design = survey_cc_male, family = quasibinomial())
model2_female_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model2_sex_strat, collapse = "+"))), design = survey_cc_female, family = quasibinomial())
model3_female_fit <- svyglm(formula = as.formula(paste0("Insomnia~", paste(model3_sex_strat, collapse = "+"))), design = survey_cc_female, family = quasibinomial())
for (i in 2:3){
for (sex in c("male", "female")){
type <- ifelse(i == 2, "GISE", "GIPSE")
table5[paste0(sex, "_model_", i),
c("index_eff", "index_CI", "index_pval", "index_paper_pval")]  <-
extract_one_exp(get(paste0("model", i, "_", sex, "_fit")) ,
exposure = paste0(type, "_scaled"))[c("est", "CI", "pval","paper_pval")]
}
}
table5
write.csv(table5, file = file.path(folder_path, "Results/table5.csv"))
summary(model1_fit)
summary(model3_fit)
anova(model1_fit, model3_fit)
anova(model1_fit, model3_fit) -> temp
temp
summary(temp)
summary(model1_fit)
summary(model2_fit)
summary(model3_fit)
summary(model4_fit)
coef(model5_fit)
coef(model3_fit)
anova(model3_fit, model5_fit)
aic(model3_fit)
AIC(model3_fit)
AIC(model5_fit)
